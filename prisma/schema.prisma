// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Gods {
    id                         Int       @id
    name                       String    @unique
    pantheon                   Pantheons @relation(fields: [pantheonId], references: [id])
    pantheonId                 Int
    roles                      String
    title                      String
    type                       String
    lore                       String
    pros                       String?
    cons                       String?
    autoBanned                 Boolean   @default(false)
    onFreeRotation             Boolean   @default(false)
    latestGod                  Boolean   @default(false)
    ability1                   String
    ability2                   String
    ability3                   String
    ability4                   String
    ability5                   String
    abilityThumbnail1          String
    abilityThumbnail2          String
    abilityThumbnail3          String
    abilityThumbnail4          String
    abilityThumbnail5          String
    basicAttack                String
    attackSpeed                Float     @default(0)
    AttackSpeedPerLevel        Float     @default(0)
    hp5PerLevel                Float     @default(0)
    health                     Int       @default(0)
    healthPerLevel             Int       @default(0)
    mp5PerLevel                Float     @default(0)
    magicProtection            Int       @default(0)
    magicProtectionPerLevel    Float     @default(0)
    magicalPower               Int       @default(0)
    magicalPowerPerLevel       Float     @default(0)
    mana                       Int       @default(0)
    manaPerFive                Float     @default(0)
    manaPerLevel               Int       @default(0)
    physicalPower              Int       @default(0)
    physicalPowerPerLevel      Float     @default(0)
    physicalProtection         Int       @default(0)
    physicalProtectionPerLevel Float     @default(0)
    speed                      Int       @default(0)
    godCardUrl                 String?
    godIconUrl                 String
    skins                      Skins[]
}

model Pantheons {
    id   Int    @id @default(autoincrement())
    name String @unique
    gods Gods[]
}

model Skins {
    id                    Int                     @id
    god                   Gods                    @relation(fields: [godId], references: [id])
    godId                 Int
    name                  String
    godIconUrl            String
    godSkinUrl            String
    obtainability         SkinsObtainability?     @relation(fields: [obtainabilityId], references: [id])
    obtainabilityId       Int?
    priceFavor            Int                     @default(0)
    priceGems             Int                     @default(0)
    releaseDate           DateTime?
    playersSkins          PlayersSkins[]
    playersWishes         PlayersWishedSkins[]
    playersSeasonsArchive PlayersSeasonsArchive[]
}

model SkinsObtainability {
    id    Int     @id @default(autoincrement())
    name  String  @unique
    skins Skins[]
}

model Players {
    userId                String
    guild                 Guilds                  @relation(fields: [guildId], references: [id])
    guildId               String
    rollsAvailable        Int                     @default(3)
    claimsAvailable       Int                     @default(1)
    lastRollChangeDate    DateTime?
    lastClaimDate         DateTime?
    isBanned              Boolean                 @default(false)
    banStartDate          DateTime?
    banEndDate            DateTime?
    banCount              Int?                    @default(0)
    playersSkins          PlayersSkins[]
    wishedSkins           PlayersWishedSkins[]
    joinDate              DateTime                @default(now())
    win                   Int                     @default(0)
    loss                  Int                     @default(0)
    winningStreak         Int                     @default(0)
    losingStreak          Int                     @default(0)
    highestWinningStreak  Int                     @default(0)
    highestLosingStreak   Int                     @default(0)
    rolls                 Int                     @default(0)
    claimedCards          Int                     @default(0)
    cardsGiven            Int                     @default(0)
    cardsExchanged        Int                     @default(0)
    cardsStolen           Int                     @default(0)
    cardsReceived         Int                     @default(0)
    playersSeasonsArchive PlayersSeasonsArchive[]

    @@id([userId, guildId])
}

model Guilds {
    id      String    @id
    season  Int       @default(0)
    players Players[]
}

model PlayersSeasonsArchive {
    player                    Players                     @relation(fields: [userId, guildId], references: [userId, guildId])
    userId                    String
    guildId                   String
    season                    Int
    claimedCards              Int                         @default(0)
    win                       Int                         @default(0)
    loss                      Int                         @default(0)
    highestWinningStreak      Int                         @default(0)
    highestLosingStreak       Int                         @default(0)
    favoriteSkin              Skins?                      @relation(fields: [favoriteSkinId], references: [id])
    favoriteSkinId            Int?
    rolls                     Int                         @default(0)
    cardsGiven                Int                         @default(0)
    cardsExchanged            Int                         @default(0)
    cardsStolen               Int                         @default(0)
    cardsReceived             Int                         @default(0)
    playerSeasonsAchievements PlayerSeasonsAchievements[]

    @@id([userId, guildId, season])
}

model Achievements {
    id                        Int                         @id @default(autoincrement())
    name                      String                      @unique
    description               String
    tokens                    Int                         @default(0)
    playerSeasonsAchievements PlayerSeasonsAchievements[]
}

model PlayerSeasonsAchievements {
    playersSeasonsArchive PlayersSeasonsArchive @relation(references: [userId, guildId, season], fields: [userId, guildId, season])
    userId                String
    guildId               String
    season                Int
    achievements          Achievements          @relation(references: [id], fields: [achievementId])
    achievementId         Int

    @@id([userId, guildId, season, achievementId])
}

model PlayersSkins {
    guildId              String
    skin                 Skins     @relation(fields: [skinId], references: [id])
    skinId               Int
    player               Players   @relation(fields: [userId, guildId], references: [userId, guildId])
    userId               String
    isExhausted          Boolean?  @default(false)
    exhaustChangeDate    DateTime?
    win                  Int       @default(0)
    loss                 Int       @default(0)
    winningStreak        Int       @default(0)
    losingStreak         Int       @default(0)
    highestWinningStreak Int       @default(0)
    highestLosingStreak  Int       @default(0)
    isFavorite           Boolean   @default(false)

    @@id([guildId, skinId])
}

model PlayersWishedSkins {
    player  Players @relation(fields: [userId, guildId], references: [userId, guildId])
    userId  String
    guildId String
    skin    Skins   @relation(fields: [skinId], references: [id])
    skinId  Int

    @@id([userId, guildId, skinId])
}
